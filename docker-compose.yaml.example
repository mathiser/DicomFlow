version: "3"

services:
  base:
    image: dicom_flow-base
    build:
      context: "base"
      dockerfile: "Dockerfile"


  rabbit:
    hostname: "rabbit"
    restart: always
    image: rabbitmq:3-management
    ports:
      - 15672:15672
    volumes:
        - ./mounts/rabbit/timeout.conf:/etc/rabbitmq/conf.d/timeout.conf
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  storescp:
    hostname: "storescp"
    restart: always
    depends_on:
      - rabbit
      - base
    ports:
      - "10000:10000"
    build:
      context: "storescp"
      dockerfile: "Dockerfile"
      args:
        BASE_IMAGE: dicom_flow-base
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=20

  fingerprinter:
    hostname: "fingerprinter"
    restart: always
    depends_on:
      - rabbit
      - base
    build:
      context: "fingerprinter"
      dockerfile: "Dockerfile"
      args:
        BASE_IMAGE: dicom_flow-base
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ${FLOWS_DIR}:/opt/DicomFlow/flows

  scheduler:
    hostname: "scheduler"
    restart: always
    depends_on:
      - rabbit
      - base
    build:
      context: "scheduler"
      dockerfile: "Dockerfile"
      args:
        BASE_IMAGE: dicom_flow-base
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=10

  cpu_consumer:
    hostname: "consumer"
    restart: always
    deploy:
      mode: replicated
      replicas: 3
    depends_on:
      - rabbit
      - base
    build:
      context: "consumer"
      dockerfile: "Dockerfile"
      args:
        BASE_IMAGE: dicom_flow-base
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=20
      #- GPUS=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

#  gpu_consumer:
#    hostname: "consumer"
#    restart: always
#    deploy:
#      mode: replicated
#      replicas: 1
#    depends_on:
#      - rabbit
#      - base
#    build:
#      context: "consumer"
#      dockerfile: "Dockerfile"
#      args:
#        BASE_IMAGE: dicom_flow-base
#    environment:
#      - PYTHONUNBUFFERED=1
#      - LOG_LEVEL=20
#      - GPUS=0
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock

  storescu:
    hostname: "storescu"
    restart: always
    depends_on:
      - rabbit
      - base
    build:
      context: "storescu"
      dockerfile: "Dockerfile"
      args:
        BASE_IMAGE: dicom_flow-base
    environment:
      - PYTHONUNBUFFERED=1

  flow_tracker:
    hostname: "flow-tracker"
    restart: always
    depends_on:
      - rabbit
      - base
    build:
      context: "flow_tracker"
      dockerfile: "Dockerfile"
      args:
        BASE_IMAGE: dicom_flow-base
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ${FLOWTRACKER_DIR}:/opt/DicomFlow/database:rw

  file_storage:
    hostname: "file-storage"
    restart: always
    depends_on:
      - base
    build:
      context: "file_storage"
      dockerfile: "Dockerfile"
      args:
        BASE_IMAGE: dicom_flow-base
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=20

  static_storage:
    hostname: "static-storage"
    restart: always
    depends_on:
      - base
    build:
      context: "static_storage"
      dockerfile: "Dockerfile"
      args:
        BASE_IMAGE: dicom_flow-base
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ${STATIC_DIR}:/opt/DicomFlow/static:ro

  dashboard:
    restart: always
    image: grafana/grafana-enterprise
    ports:
      - "3001:3000"
    environment:
      - "GF_INSTALL_PLUGINS=frser-sqlite-datasource,cloudspout-button-panel"
    volumes:
      - dashboard_config:/etc/grafana:rw
      - dashboard_home:/usr/share/grafana:rw
      - dashboard_data:/var/lib/grafana:rw
      - ${FLOWTRACKER_DIR}:/var/lib/grafana/database:ro

volumes:
  dashboard_config:
  dashboard_home:
  dashboard_data:

